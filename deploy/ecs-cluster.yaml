AWSTemplateFormatVersion: "2010-09-09"
Description: Elastic Container Services Stack
Parameters:

  ResourcePrefix:
    Type: String

  ClusterName:
    Type: String

  DesiredCapacity:
    Type: Number
    Default: "4"
    Description: Number of EC2 instances to launch in your ECS cluster.

  MaxSize:
    Type: Number
    Default: "6"
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.

  ScalingAdjustment:
    Type: Number
    Default: 2
    Description: Number of instances to increase by when a scaling event occurs

  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id> # https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-public-parameters.html
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType: # https://aws.amazon.com/ec2/instance-types/
    Description: EC2 instance type
    Type: String
    Default: c5.xlarge
    AllowedValues: 
      - t3.small    # 2p/2gb  24c  general /intel / up to 5gb network
      - t3.medium   # 2p/4gb  24c
      - t3.large    # 2p/8gb  36c
      - t3.xlarge   # 4p/16gb 96c
      - t3.2xlarge  # 8p/32gb 192c
      - t3a.small   # 2p/2gb  24c  general / amd / up to 5gb network
      - t3a.medium  # 2p/4gb  24c
      - t3a.large   # 2p/8gb  26c
      - t3a.xlarge  # 4p/16gb 96c
      - t3a.2xlarge # 8p/32gb 192c
      - m5.large    # 2p/8gb   general / intel xeon / 10 and up
      - m5.xlarge   # 4p/16gb
      - m5.2xlarge  # 8p/32gb
      - m5.4xlarge  # 16p/64gb
      - m5.12xlarge # 32p/128gb
      - m5.16xlarge # 64p/256gb
      - m5.24xlarge # 96p/384gb
      - c5.large    # 2p/4gb  compute / intel xeon / 10 and up
      - c5.xlarge   # 4p/8gb
      - c5.2xlarge  # 8p/16gb
      - c5.4xlarge  # 16p/32gb
      - c5.9xlarge  # 36p/72gb
      - c5.12xlarge # 48p/96gb
      - c5.18xlarge # 72p/144gb
      - c5.24xlarge # 96p/192gb
      - r5.large    # 2p/16gb  memory / intel xeon / 10 and up
      - r5.xlarge   # 4p/32gb
      - r5.2xlarge  # 8p/64gb
      - r5.4xlarge  # 16p/128gb
      - r5.8xlarge  # 32p/256gb
      - r5.12xlarge # 48p/384gb
      - r5.16xlarge # 64p/512gb
      - r5.24xlarge # 96p/768gb
    ConstraintDescription: Please choose a valid instance type.

  VpcId:
    Type: String

  PublicSubnetA:
    Type: String

  PublicSubnetB:
    Type: String

  PrivateSubnetA:
    Type: String

  PrivateSubnetB:
    Type: String
  
Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ResourcePrefix}-${ClusterName}

  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref VpcId

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  EcsSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private ALB
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref PrivateLoadBalancerSG

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref EcsHostSecurityGroup

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      SecurityGroups: [!Ref EcsHostSecurityGroup]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref EC2Role]

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "ecs:CreateCluster"
              - "ecs:DeregisterContainerInstance"
              - "ecs:DiscoverPollEndpoint"
              - "ecs:Poll"
              - "ecs:RegisterContainerInstance"
              - "ecs:StartTelemetrySession"
              - "ecs:Submit*"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
            Resource: "*"
  
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: "-1"

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: "30"
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups: [!Ref PublicLoadBalancerSG]

  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${ResourcePrefix}-TG-Drop-1
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPublic
          Type: "forward"
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  PrivateLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref VpcId

  PrivateLoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Only accept traffic from a container in the container host security group
      GroupId: !Ref PrivateLoadBalancerSG
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref EcsHostSecurityGroup

  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: "30"
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroups: [!Ref PrivateLoadBalancerSG]

  DummyTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${ResourcePrefix}-TG-Drop-2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPrivate
          Type: "forward"
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "ec2:AttachNetworkInterface"
              - "ec2:CreateNetworkInterface"
              - "ec2:CreateNetworkInterfacePermission"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DeleteNetworkInterfacePermission"
              - "ec2:Describe*"
              - "ec2:DetachNetworkInterface"
              - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
              - "elasticloadbalancing:DeregisterTargets"
              - "elasticloadbalancing:Describe*"
              - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
              - "elasticloadbalancing:RegisterTargets"
            Resource: "*"


### AUTOSCALING ################################################################

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      MetricsCollection: 
      - Granularity: "1Minute"
        Metrics: 
          - "GroupMinSize"
          - "GroupMaxSize"
          - "GroupDesiredCapacity"
          - "GroupInServiceInstances"
          - "GroupPendingInstances"
          - "GroupTerminatingInstances"
          - "GroupTotalInstances"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  ServiceScalingPolicyCPU:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      EstimatedInstanceWarmup: 60
      TargetTrackingConfiguration:
        DisableScaleIn: True
        TargetValue: 70.0 # not sure if this is even needed since new containers won't be created unless there is a request load
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  # ScaleUpPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyType: SimpleScaling
  #     AdjustmentType: ChangeInCapacity
  #     AutoScalingGroupName: !Ref ECSAutoScalingGroup
  #     Cooldown: "60"
  #     ScalingAdjustment: !Ref ScalingAdjustment

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: "StepScaling"
      MetricAggregationType: "Average"
      EstimatedInstanceWarmup: 60
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      StepAdjustments:
      - MetricIntervalLowerBound: 0
        ScalingAdjustment: !Ref ScalingAdjustment

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: "StepScaling"
      MetricAggregationType: "Average"
      EstimatedInstanceWarmup: 60
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      StepAdjustments:
      - MetricIntervalUpperBound: 0 # (74-0) to (74-45) do nothing
        MetricIntervalLowerBound: -45
        ScalingAdjustment: 0
      - MetricIntervalUpperBound: -45 # (74-45) = 29% or lower to remove instances.  If EC2 instances are created, then destroyed this value needs to be lower
        ScalingAdjustment: -1

  CPUReservationAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Maximum
      Threshold: 74 # this value needs to be low enough for new instances to be launched but not too low and waste resources. 80, 75 both caused dead locks
      AlarmDescription: Alarm if the Cluster CPU reservation exceeds the threshold
      Period: 60
      AlarmActions:
      - !Ref ScaleOutPolicy
      OKActions:
      - !Ref ScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUReservation

  MemoryReservationAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Maximum
      Threshold: 74
      AlarmDescription: Alarm if the Cluster Memory reservation exceeds the threshold 
      Period: 60
      AlarmActions:
      - !Ref ScaleOutPolicy
      OKActions:
      - !Ref ScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster

  ClusterArn:
    Description: The name of the ECS cluster
    Value: !GetAtt ECSCluster.Arn

  PrivateLoadBalancerName:
    Description: The name of the load balancer used for CloudWatch metrics monitoring
    Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName

  PrivateLoadBalancerUrl:
    Description: The url of the internal load balancer
    Value: !Join ["", ["http://", !GetAtt PrivateLoadBalancer.DNSName]]

  PrivateLoadBalancerDNSName:
    Description: The DNS Name of the private load balancer
    Value: !GetAtt PrivateLoadBalancer.DNSName

  PrivateLoadBalancerSecurityGroup:
    Value: !Ref PrivateLoadBalancerSG

  PublicLoadBalancerName:
    Description: The name of the load balancer used for CloudWatch metrics monitoring
    Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName

  PublicLoadBalancerUrl:
    Description: The url of the external load balancer
    Value: !Join ["", ["http://", !GetAtt PublicLoadBalancer.DNSName]]

  PublicLoadBalancerDNSName:
    Description: The DNS Name of the public load balancer
    Value: !GetAtt PublicLoadBalancer.DNSName

  PublicLoadBalancerSecurityGroup:
    Value: !Ref PublicLoadBalancerSG

  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt ECSRole.Arn

  PublicListener:
    Description: The ARN of the public load balancers listener
    Value: !Ref PublicLoadBalancerListener

  PrivateListener:
    Description: The ARN of the public load balancers Listener
    Value: !Ref PrivateLoadBalancerListener

  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref EcsHostSecurityGroup
