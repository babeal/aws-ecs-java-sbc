AWSTemplateFormatVersion: "2010-09-09"
Description: Container Service Auto Scaling 
Parameters:

  ECSCluster:
    Type: String

  ServiceName:
    Type: String

  LoadBalancerFullName: 
    Type: String
  
  TargetGroupFullName:
    Type: String

  AutoScalingRoleArn:
    Type: String

  MinCapacity:
    Type: String
  
  MaxCapacity:
    Type: String

  RequestsScaleOutThreshold:
    Type: Number
    Default: 200

  RequestsScaleInThreshold:
    Type: Number
    Default: 20

Resources:
  
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Join ["", [service/, !Ref ECSCluster, /, !Ref ServiceName]]  
      RoleARN: !Ref AutoScalingRoleArn 
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Disabled for now since the services die and cause recycling and artificial load
  # which then causes container scaling which then causes the ec2 instances to expand
  # The services and approach needs valid tuning before being able to turn these on 
  #
  #
  # ServiceScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${ServiceName}-scaling-policy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalingTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: PercentChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalLowerBound: 0
  #         ScalingAdjustment: 100
  #  
  # ALB500sAlarmScaleUp:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: 1
  #     Statistic: Average
  #     Threshold: 10
  #     AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
  #     Period: 60
  #     AlarmActions: [!Ref ServiceScalingPolicy]
  #     Namespace: AWS/ApplicationELB
  #     Dimensions:
  #       - Name: LoadBalancer
  #         Value: !Ref LoadBalancerFullName  # name looks something like this	app/DEV01-Publi-1310UNNN2IKV2/45fd4b085d88b1b6
  #     ComparisonOperator: GreaterThanThreshold
  #     MetricName: HTTPCode_ELB_5XX_Count

  # ServiceScaleInPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${ServiceName}-scale-in-policy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalingTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 180
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalUpperBound: 0
  #         ScalingAdjustment: -1

  # RequestCountPerTargetAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     MetricName: RequestCountPerTarget
  #     Namespace: AWS/ApplicationELB
  #     Statistic: Sum
  #     Period: 60
  #     EvaluationPeriods: 1
  #     Threshold: !Ref RequestsScaleInThreshold
  #     AlarmActions:
  #       - !Ref ServiceScaleInPolicy
  #     Dimensions:
  #     - Name: TargetGroup
  #       Value: !Ref TargetGroupFullName
  #     ComparisonOperator: LessThanOrEqualToThreshold

  ServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}-scale-in-policy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 180
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0   # from (100 - 0) to (100 - 50) scale 0
            MetricIntervalLowerBound: -50
            ScalingAdjustment: 0
          - MetricIntervalUpperBound: -50 # then from (100 - 50) to (100 - 100) scale -1
            MetricIntervalLowerBound: -100
            ScalingAdjustment: -1
          - MetricIntervalUpperBound: -100 # then from (100 - 100) = 0 (if the average is 0 aggressively remove instances)
            ScalingAdjustment: -2

  RequestCountPerTargetAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: RequestCountPerTarget
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 100 # this value is used in the scale policy calculation
      OKActions:
        - !Ref ServiceScaleInPolicy
      Dimensions:
      - Name: TargetGroup
        Value: !Ref TargetGroupFullName
      ComparisonOperator: GreaterThanOrEqualToThreshold

  # This policy takes 3 minutes to take effect and when it does it typically wants to create 4 instances or more
  # might want to add a scale out policy on the step scaling to add instances quickly
  ServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}-scale-out-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: True
        TargetValue: !Ref RequestsScaleOutThreshold
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Sub ${LoadBalancerFullName}/${TargetGroupFullName}

